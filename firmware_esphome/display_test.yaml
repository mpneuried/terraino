esphomeyaml:
  name: tester
  platform: ESP32
  board: ttgo-lora32-v1

wifi:
  ssid: 'Fuchs'
  password: 'yesterdaybambi15'
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.8.109
    gateway: 192.168.8.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: 'xrdzrtfsx&Rdq07'

ota:
  password: 'xrdzrtfsx&Rdq07'

i2c:
  sda: 5
  scl: 4

web_server:
  port: 80

time:
  - platform: sntp
    timezone: CET
    id: time
    servers:
      - "0.de.pool.ntp.org"
      - "1.de.pool.ntp.org"
      - "2.de.pool.ntp.org"

globals:
   - id: target_temp
     type: int
     # restore_state: 1
     initial_value: '29'

esp32_ble_tracker:
  scan_interval: 10s

text_sensor:
  - platform: template
    name: "Target Temp."
    lambda: |-
      return { to_string(id(target_temp))};
    update_interval: 60s

sensor:
  - platform: uptime
    name: Uptime Sensor
  - platform: ble_rssi
    mac_address: 7A:F3:FC:55:0B:04
    name: "Pebble Mathias RSSI"

binary_sensor:
  - platform: esp32_ble_tracker
    mac_address: 7A:F3:FC:55:0B:04
    name: "Pebble Mathias"

switch:
  - platform: gpio
    pin: 25
    name: "Heating"
    id: heating
  - platform: gpio
    pin: 26
    name: "Light"
    id: light
  - platform: restart
    name: "Tester Restart"

font:
  - file: "roboto.ttf"
    id: font_small
    size: 10
  - file: "roboto.ttf"
    id: font_big
    size: 20
  - file: "roboto.ttf"
    id: font_11
    size: 11
  - file: "roboto.ttf"
    id: font_12
    size: 12
  - file: "roboto.ttf"
    id: font_13
    size: 13
  - file: "roboto.ttf"
    id: font_14
    size: 14

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: 16
    address: 0x3C
    rotation: 90
    update_interval: 1s
    lambda: |-
      it.strftime(20, 0, id(font_small), "%H:%M", id(time).now());
      it.print(5, 40, id(font_small), "Heating");
      if (id(heating).state) {
        it.print(5, 20, id(font_big), "ON");
      } else {
        it.print(5, 20, id(font_big), "OFF");
      }
      it.print(5, 70, id(font_small), "Light");
      if (id(light).state) {
        it.print(5, 50, id(font_big), "ON");
      } else {
        it.print(5, 50, id(font_big), "OFF");
      }
      it.print(5, 80, id(font_11), "abcABC0123456789");
      it.print(5, 91, id(font_12), "abcABC0123456789");
      it.print(5, 103, id(font_13), "abcABC0123456789");
      it.print(5, 116, id(font_14), "abcABC0123456789");
